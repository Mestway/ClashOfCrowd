<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10200.17.0505.1445                               -->
<workbook source-build='10.2.2 (10200.17.0505.1445)' source-platform='mac' version='10.2' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='DirectAnnotation.interview' inline='true' name='federated.1wjjsp01ho4kj514nj96f0mh4l8r' version='10.2'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='DirectAnnotation.interview' name='semistructpassivestore-direct.0y1mlj71dlezrg11ns9f31umlv4f'>
            <connection class='semistructpassivestore-direct' directory='/Users/tongshuangwu/Desktop/sourcetree/clash-of-word-sys/results' filename='DirectAnnotation.interview.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[DirectAnnotation.interview.json]'>
                  <map key='Bingo' value='true' />
                  <map key='Bingo.Value' value='true' />
                  <map key='DirectAnnotation' value='true' />
                  <map key='DirectAnnotation.Value' value='true' />
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.0y1mlj71dlezrg11ns9f31umlv4f' name='DirectAnnotation.interview.json' table='[DirectAnnotation.interview.json]' type='table' />
        <cols>
          <map key='[Bingo Index (generated)]' value='[DirectAnnotation.interview.json].[Bingo.Index (generated)]' />
          <map key='[DirectAnnotation Index (generated)]' value='[DirectAnnotation.interview.json].[DirectAnnotation.Index (generated)]' />
          <map key='[Document Index (generated)]' value='[DirectAnnotation.interview.json].[Document Index (generated)]' />
          <map key='[engage (Bingo)]' value='[DirectAnnotation.interview.json].[Bingo.Value.engage]' />
          <map key='[engage (DirectAnnotation)]' value='[DirectAnnotation.interview.json].[DirectAnnotation.Value.engage]' />
          <map key='[intuitive (Bingo)]' value='[DirectAnnotation.interview.json].[Bingo.Value.intuitive]' />
          <map key='[intuitive (DirectAnnotation)]' value='[DirectAnnotation.interview.json].[DirectAnnotation.Value.intuitive]' />
          <map key='[partner]' value='[DirectAnnotation.interview.json].[Bingo.Value.partner]' />
        </cols>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[DirectAnnotation.interview.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Bingo.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Bingo Index (generated)]</local-name>
            <parent-name>[DirectAnnotation.interview.json]</parent-name>
            <remote-alias>Bingo.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Bingo.Value.engage</remote-name>
            <remote-type>5</remote-type>
            <local-name>[engage (Bingo)]</local-name>
            <parent-name>[DirectAnnotation.interview.json]</parent-name>
            <remote-alias>Bingo.Value.engage</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Bingo.Value.intuitive</remote-name>
            <remote-type>5</remote-type>
            <local-name>[intuitive (Bingo)]</local-name>
            <parent-name>[DirectAnnotation.interview.json]</parent-name>
            <remote-alias>Bingo.Value.intuitive</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Bingo.Value.partner</remote-name>
            <remote-type>5</remote-type>
            <local-name>[partner]</local-name>
            <parent-name>[DirectAnnotation.interview.json]</parent-name>
            <remote-alias>Bingo.Value.partner</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DirectAnnotation.Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[DirectAnnotation Index (generated)]</local-name>
            <parent-name>[DirectAnnotation.interview.json]</parent-name>
            <remote-alias>DirectAnnotation.Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DirectAnnotation.Value.engage</remote-name>
            <remote-type>5</remote-type>
            <local-name>[engage (DirectAnnotation)]</local-name>
            <parent-name>[DirectAnnotation.interview.json]</parent-name>
            <remote-alias>DirectAnnotation.Value.engage</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>DirectAnnotation.Value.intuitive</remote-name>
            <remote-type>5</remote-type>
            <local-name>[intuitive (DirectAnnotation)]</local-name>
            <parent-name>[DirectAnnotation.interview.json]</parent-name>
            <remote-alias>DirectAnnotation.Value.intuitive</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Bingo Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Bingo.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' datatype='integer' name='[DirectAnnotation Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>DirectAnnotation.Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Document Index (generated)1' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per Bingo]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([Bingo Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Bingo level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per DirectAnnotation.interview.json]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNTD([Document Index (generated)])' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at DirectAnnotation.interview.json level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' is-auto-gen-lod-field='true' name='[Number of Records per DirectAnnotation]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ INCLUDE [Document Index (generated)] : COUNTD([DirectAnnotation Index (generated)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at DirectAnnotation level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[Partner per Bingo]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[Bingo Index (generated)] : MAX([partner]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Bingo level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[engage (Bingo)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>Bingo.Value.engage</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[engage (DirectAnnotation)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>DirectAnnotation.Value.engage</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[engage per Bingo]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[Bingo Index (generated)] : MAX([engage (Bingo)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Bingo level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[engage per DirectAnnotation]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[DirectAnnotation Index (generated)] : MAX([engage (DirectAnnotation)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at DirectAnnotation level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[intuitive (Bingo)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>Bingo.Value.intuitive</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[intuitive (DirectAnnotation)]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>DirectAnnotation.Value.intuitive</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[intuitive per Bingo]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[Bingo Index (generated)] : MAX([intuitive (Bingo)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Bingo level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[intuitive per DirectAnnotation]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[DirectAnnotation Index (generated)] : MAX([intuitive (DirectAnnotation)]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at DirectAnnotation level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' is-auto-gen-lod-field='true' name='[partner per Bingo]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='{ FIXED [Document Index (generated)],[Bingo Index (generated)] : MAX([partner]) }' />
        <desc>
          <formatted-text>
            <run>A calculated measure that is at Bingo level of detail</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Partner' datatype='real' name='[partner]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>Bingo.Value.partner</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Bingo' role='dimensions'>
        <folder-item name='[Bingo Index (generated)]' type='field' />
      </folder>
      <folder name='Direct Annotation' role='dimensions'>
        <folder-item name='[DirectAnnotation Index (generated)]' type='field' />
      </folder>
      <folder name='DirectAnnotation' role='dimensions' />
      <folder name='DirectAnnotation.interview' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
      </folder>
      <folder name='Source Measures' role='measures'>
        <folder-item name='[engage (Bingo)]' type='field' />
        <folder-item name='[engage (DirectAnnotation)]' type='field' />
        <folder-item name='[intuitive (Bingo)]' type='field' />
        <folder-item name='[intuitive (DirectAnnotation)]' type='field' />
        <folder-item name='[partner]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.404977' measure-ordering='alphabetic' measure-percentage='0.595023' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='DirectAnnotation.features' inline='true' name='federated.0novreq1oylpcx13mklli1p0wbge' version='10.2'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='DirectAnnotation.features' name='semistructpassivestore-direct.0ujg5q407s4g2r17x6i0s14hyh5q'>
            <connection class='semistructpassivestore-direct' directory='/Users/tongshuangwu/Desktop/sourcetree/clash-of-word-sys/results' filename='DirectAnnotation.features.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[DirectAnnotation.features.json]'>
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.0ujg5q407s4g2r17x6i0s14hyh5q' name='DirectAnnotation.features.json' table='[DirectAnnotation.features.json]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[DirectAnnotation.features.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>_id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[_id]</local-name>
            <parent-name>[DirectAnnotation.features.json]</parent-name>
            <remote-alias>_id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>feature</remote-name>
            <remote-type>130</remote-type>
            <local-name>[feature]</local-name>
            <parent-name>[DirectAnnotation.features.json]</parent-name>
            <remote-alias>feature</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>role</remote-name>
            <remote-type>130</remote-type>
            <local-name>[role]</local-name>
            <parent-name>[DirectAnnotation.features.json]</parent-name>
            <remote-alias>role</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>task</remote-name>
            <remote-type>5</remote-type>
            <local-name>[task]</local-name>
            <parent-name>[DirectAnnotation.features.json]</parent-name>
            <remote-alias>task</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[type]</local-name>
            <parent-name>[DirectAnnotation.features.json]</parent-name>
            <remote-alias>type</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>user</remote-name>
            <remote-type>130</remote-type>
            <local-name>[user]</local-name>
            <parent-name>[DirectAnnotation.features.json]</parent-name>
            <remote-alias>user</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>weight</remote-name>
            <remote-type>5</remote-type>
            <local-name>[weight]</local-name>
            <parent-name>[DirectAnnotation.features.json]</parent-name>
            <remote-alias>weight</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='COUNT' datatype='integer' name='[Calculation_1632273404430282762]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNT([feature])' />
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='_Id' datatype='string' name='[_id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>_id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Feature' datatype='string' name='[feature]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>feature</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Role' datatype='string' name='[role]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>role</run>
          </formatted-text>
        </desc>
      </column>
      <column aggregation='Sum' caption='Task' datatype='real' name='[task]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>task</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>type</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='User' datatype='string' name='[user]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>user</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Weight' datatype='real' name='[weight]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>weight</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='DirectAnnotation.features' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[_id]' type='field' />
        <folder-item name='[feature]' type='field' />
        <folder-item name='[role]' type='field' />
        <folder-item name='[type]' type='field' />
        <folder-item name='[user]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.6325' measure-ordering='alphabetic' measure-percentage='0.3675' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='DirectAnnotation.labels' inline='true' name='federated.0xs2e5b1giud6l1eb5tei01kzaql' version='10.2'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='DirectAnnotation.labels' name='semistructpassivestore-direct.1us7iyj0tqis9w1eoblhg1xsy0vu'>
            <connection class='semistructpassivestore-direct' directory='/Users/tongshuangwu/Desktop/sourcetree/clash-of-word-sys/results' filename='DirectAnnotation.labels.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[DirectAnnotation.labels.json]'>
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='semistructpassivestore-direct.1us7iyj0tqis9w1eoblhg1xsy0vu' name='DirectAnnotation.labels.json' table='[DirectAnnotation.labels.json]' type='table' />
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[DirectAnnotation.labels.json]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>_id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[_id]</local-name>
            <parent-name>[DirectAnnotation.labels.json]</parent-name>
            <remote-alias>_id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>label</remote-name>
            <remote-type>5</remote-type>
            <local-name>[label]</local-name>
            <parent-name>[DirectAnnotation.labels.json]</parent-name>
            <remote-alias>label</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>role</remote-name>
            <remote-type>130</remote-type>
            <local-name>[role]</local-name>
            <parent-name>[DirectAnnotation.labels.json]</parent-name>
            <remote-alias>role</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>task</remote-name>
            <remote-type>5</remote-type>
            <local-name>[task]</local-name>
            <parent-name>[DirectAnnotation.labels.json]</parent-name>
            <remote-alias>task</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[type]</local-name>
            <parent-name>[DirectAnnotation.labels.json]</parent-name>
            <remote-alias>type</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>user</remote-name>
            <remote-type>130</remote-type>
            <local-name>[user]</local-name>
            <parent-name>[DirectAnnotation.labels.json]</parent-name>
            <remote-alias>user</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='_Id' datatype='string' name='[_id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>_id</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Label' datatype='real' name='[label]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>label</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Role' datatype='string' name='[role]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>role</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Task' datatype='real' name='[task]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>task</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>type</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='User' datatype='string' name='[user]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>user</run>
          </formatted-text>
        </desc>
      </column>
      <column-instance column='[label]' derivation='Count' name='[cnt:label:ok]' pivot='key' type='ordinal' />
      <folder name='DirectAnnotation.labels' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[_id]' type='field' />
        <folder-item name='[role]' type='field' />
        <folder-item name='[type]' type='field' />
        <folder-item name='[user]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.577197' measure-ordering='alphabetic' measure-percentage='0.422803' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[cnt:label:ok]' type='palette'>
            <map to='#499894'>
              <bucket>17</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>1</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>28</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>498</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>10</bucket>
            </map>
            <map to='#79706e'>
              <bucket>14</bucket>
            </map>
            <map to='#79706e'>
              <bucket>27</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>19</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>11</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>4</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>25</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>5</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>2</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>12</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>16</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>30</bucket>
            </map>
            <map to='#d37295'>
              <bucket>31</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>3</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>7</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>26</bucket>
            </map>
            <map to='#e15759'>
              <bucket>20</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>13</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>6</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>33</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>24</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>9</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='Bingo.labels' inline='true' name='federated.1saiza4160ptto1b45ri509qyc8c' version='10.2'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='labels' name='semistructpassivestore-direct.14qylvc1quhu4n1e2wnh411ia6y8'>
            <connection class='semistructpassivestore-direct' directory='/Users/tongshuangwu/Desktop/sourcetree/clash-of-word-sys/results' filename='Bingo.labels.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[Bingo.labels.json+]'>
                  <map key='{root}' value='true' />
                </semistruct-schema>
                <semistruct-schema table='[Bingo.labels.json]'>
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation all='true' name='Bingo.labels.json+' type='union'>
          <columns>
            <column datatype='string' name='Table Name' />
            <column datatype='integer' name='Document Index (generated)' />
            <column datatype='string' name='_id' />
            <column datatype='real' name='label' />
            <column datatype='string' name='role' />
            <column datatype='real' name='task' />
            <column datatype='string' name='type' />
            <column datatype='string' name='user' />
          </columns>
          <relation connection='semistructpassivestore-direct.14qylvc1quhu4n1e2wnh411ia6y8' name='Bingo.labels.json' table='[Bingo.labels.json]' type='table' />
          <relation connection='semistructpassivestore-direct.14qylvc1quhu4n1e2wnh411ia6y8' name='DirectAnnotation.labels.json' table='[DirectAnnotation.labels.json]' type='table' />
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Table Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Table Name]</local-name>
            <parent-name>[Bingo.labels.json+]</parent-name>
            <remote-alias>Table Name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[Bingo.labels.json+]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>_id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[_id]</local-name>
            <parent-name>[Bingo.labels.json+]</parent-name>
            <remote-alias>_id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>label</remote-name>
            <remote-type>5</remote-type>
            <local-name>[label]</local-name>
            <parent-name>[Bingo.labels.json+]</parent-name>
            <remote-alias>label</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>role</remote-name>
            <remote-type>130</remote-type>
            <local-name>[role]</local-name>
            <parent-name>[Bingo.labels.json+]</parent-name>
            <remote-alias>role</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>task</remote-name>
            <remote-type>5</remote-type>
            <local-name>[task]</local-name>
            <parent-name>[Bingo.labels.json+]</parent-name>
            <remote-alias>task</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[type]</local-name>
            <parent-name>[Bingo.labels.json+]</parent-name>
            <remote-alias>type</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>user</remote-name>
            <remote-type>130</remote-type>
            <local-name>[user]</local-name>
            <parent-name>[Bingo.labels.json+]</parent-name>
            <remote-alias>user</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
        </metadata-records>
      </connection>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[Table Name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>Table Name</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[_id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>_id</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[label]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>label</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[role]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>role</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[task]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>task</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[type]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>type</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[user]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>user</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Bingo.labels' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[Table Name]' type='field' />
        <folder-item name='[_id]' type='field' />
        <folder-item name='[role]' type='field' />
        <folder-item name='[type]' type='field' />
        <folder-item name='[user]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.605' measure-ordering='alphabetic' measure-percentage='0.395' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;China&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='Bingo.features' inline='true' name='federated.1aabg051c5btfk1ercmmw1ce8064' version='10.2'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='features' name='semistructpassivestore-direct.1pn7hgb0239zup185g23t1smsjka'>
            <connection class='semistructpassivestore-direct' directory='/Users/tongshuangwu/Desktop/sourcetree/clash-of-word-sys/results' filename='Bingo.features.json' password='' server=''>
              <semistruct-schemas>
                <semistruct-schema table='[Bingo.features.json+]'>
                  <map key='{root}' value='true' />
                </semistruct-schema>
                <semistruct-schema table='[Bingo.features.json]'>
                  <map key='{root}' value='true' />
                </semistruct-schema>
              </semistruct-schemas>
            </connection>
          </named-connection>
        </named-connections>
        <relation all='true' name='Bingo.features.json+' type='union'>
          <columns>
            <column datatype='string' name='Table Name' />
            <column datatype='integer' name='Document Index (generated)' />
            <column datatype='string' name='_id' />
            <column datatype='string' name='feature' />
            <column datatype='string' name='role' />
            <column datatype='real' name='task' />
            <column datatype='string' name='type' />
            <column datatype='string' name='user' />
            <column datatype='real' name='weight' />
          </columns>
          <relation connection='semistructpassivestore-direct.1pn7hgb0239zup185g23t1smsjka' name='Bingo.features.json' table='[Bingo.features.json]' type='table' />
          <relation connection='semistructpassivestore-direct.1pn7hgb0239zup185g23t1smsjka' name='DirectAnnotation.features.json' table='[DirectAnnotation.features.json]' type='table' />
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Table Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Table Name]</local-name>
            <parent-name>[Bingo.features.json+]</parent-name>
            <remote-alias>Table Name</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Document Index (generated)</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Document Index (generated)]</local-name>
            <parent-name>[Bingo.features.json+]</parent-name>
            <remote-alias>Document Index (generated)</remote-alias>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>_id</remote-name>
            <remote-type>130</remote-type>
            <local-name>[_id]</local-name>
            <parent-name>[Bingo.features.json+]</parent-name>
            <remote-alias>_id</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>feature</remote-name>
            <remote-type>130</remote-type>
            <local-name>[feature]</local-name>
            <parent-name>[Bingo.features.json+]</parent-name>
            <remote-alias>feature</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>role</remote-name>
            <remote-type>130</remote-type>
            <local-name>[role]</local-name>
            <parent-name>[Bingo.features.json+]</parent-name>
            <remote-alias>role</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>task</remote-name>
            <remote-type>5</remote-type>
            <local-name>[task]</local-name>
            <parent-name>[Bingo.features.json+]</parent-name>
            <remote-alias>task</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[type]</local-name>
            <parent-name>[Bingo.features.json+]</parent-name>
            <remote-alias>type</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>user</remote-name>
            <remote-type>130</remote-type>
            <local-name>[user]</local-name>
            <parent-name>[Bingo.features.json+]</parent-name>
            <remote-alias>user</remote-alias>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='binary' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>weight</remote-name>
            <remote-type>5</remote-type>
            <local-name>[weight]</local-name>
            <parent-name>[Bingo.features.json+]</parent-name>
            <remote-alias>weight</remote-alias>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='COUNT' datatype='integer' name='[Calculation_43276792247332865]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNT([feature])' />
      </column>
      <column aggregation='Sum' datatype='integer' name='[Document Index (generated)]' role='dimension' type='ordinal'>
        <desc>
          <formatted-text>
            <run>Document Index (generated)</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[Table Name]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>Table Name</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[_id]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>_id</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[feature]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>feature</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[role]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>role</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[task]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>task</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[type]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>type</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[user]' role='dimension' type='nominal'>
        <desc>
          <formatted-text>
            <run>user</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='real' name='[weight]' role='measure' type='quantitative'>
        <desc>
          <formatted-text>
            <run>weight</run>
          </formatted-text>
        </desc>
      </column>
      <folder name='Bingo.features' role='dimensions'>
        <folder-item name='[Document Index (generated)]' type='field' />
        <folder-item name='[Table Name]' type='field' />
        <folder-item name='[_id]' type='field' />
        <folder-item name='[feature]' type='field' />
        <folder-item name='[role]' type='field' />
        <folder-item name='[type]' type='field' />
        <folder-item name='[user]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.6075' measure-ordering='alphabetic' measure-percentage='0.3925' show-structure='false' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;China&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Sheet 4'>
      <table>
        <view>
          <datasources>
            <datasource caption='Bingo.features' name='federated.1aabg051c5btfk1ercmmw1ce8064' />
          </datasources>
          <datasource-dependencies datasource='federated.1aabg051c5btfk1ercmmw1ce8064'>
            <column caption='COUNT' datatype='integer' name='[Calculation_43276792247332865]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNT([feature])' />
            </column>
            <column-instance column='[task]' derivation='Attribute' name='[attr:task:ok]' pivot='key' type='ordinal' />
            <column datatype='string' name='[feature]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>feature</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[feature]' derivation='None' name='[none:feature:nk]' pivot='key' type='nominal' />
            <column-instance column='[task]' derivation='None' name='[none:task:ok]' pivot='key' type='ordinal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column datatype='real' name='[task]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>task</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='string' name='[type]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>type</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Calculation_43276792247332865]' derivation='User' name='[usr:Calculation_43276792247332865:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1aabg051c5btfk1ercmmw1ce8064].[none:feature:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='[Calculation_43276792247332865]' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;about&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;adults&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;and&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;annoying&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;average&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;bad&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;better&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;by&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;content&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;definitely&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;enough&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;entertain&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;funny&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;good&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;had&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;has&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;have&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;hearing&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;hilarious&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;him&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;his&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;jokes&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;just&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;keep&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;kids&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;make&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;me&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;minutes&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;mostly&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;movie&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;much&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;no&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;numerous&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;of&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;one&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;part&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;parts&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;really&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;renting&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;sick&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;sid&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;side&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;slothy&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;slur&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;talk&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;the&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;them&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;to&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;too&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;units&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;voice&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;want&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;was&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;watch&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;were&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;worst&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;worth&quot;' />
                  <groupfilter function='member' level='[none:feature:nk]' member='&quot;you&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <sort class='computed' column='[federated.1aabg051c5btfk1ercmmw1ce8064].[none:feature:nk]' direction='DESC' using='[federated.1aabg051c5btfk1ercmmw1ce8064].[usr:Calculation_43276792247332865:qk]' />
          <filter class='categorical' column='[federated.1aabg051c5btfk1ercmmw1ce8064].[none:task:ok]'>
            <groupfilter function='member' level='[none:task:ok]' member='2.0' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1aabg051c5btfk1ercmmw1ce8064].[none:task:ok]</column>
            <column>[federated.1aabg051c5btfk1ercmmw1ce8064].[none:feature:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([federated.1aabg051c5btfk1ercmmw1ce8064].[attr:task:ok] / [federated.1aabg051c5btfk1ercmmw1ce8064].[none:feature:nk])</rows>
        <cols>([federated.1aabg051c5btfk1ercmmw1ce8064].[none:type:nk] * [federated.1aabg051c5btfk1ercmmw1ce8064].[usr:Calculation_43276792247332865:qk])</cols>
      </table>
    </worksheet>
    <worksheet name='features'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Selected features for each document</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='DirectAnnotation.features' name='federated.0novreq1oylpcx13mklli1p0wbge' />
          </datasources>
          <datasource-dependencies datasource='federated.0novreq1oylpcx13mklli1p0wbge'>
            <column caption='COUNT' datatype='integer' name='[Calculation_1632273404430282762]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNT([feature])' />
            </column>
            <column-instance column='[task]' derivation='Attribute' name='[attr:task:ok]' pivot='key' type='ordinal' />
            <column caption='Feature' datatype='string' name='[feature]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>feature</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[feature]' derivation='None' name='[none:feature:nk]' pivot='key' type='nominal' />
            <column-instance column='[task]' derivation='None' name='[none:task:ok]' pivot='key' type='ordinal' />
            <column aggregation='Sum' caption='Task' datatype='real' name='[task]' role='dimension' type='ordinal'>
              <desc>
                <formatted-text>
                  <run>task</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[Calculation_1632273404430282762]' derivation='User' name='[usr:Calculation_1632273404430282762:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0novreq1oylpcx13mklli1p0wbge].[attr:task:ok]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[attr:task:ok]' />
              <groupfilter function='member' level='[attr:task:ok]' member='%many-values%' />
            </groupfilter>
          </filter>
          <sort class='computed' column='[federated.0novreq1oylpcx13mklli1p0wbge].[none:feature:nk]' direction='DESC' using='[federated.0novreq1oylpcx13mklli1p0wbge].[usr:Calculation_1632273404430282762:qk]' />
          <filter class='categorical' column='[federated.0novreq1oylpcx13mklli1p0wbge].[none:task:ok]'>
            <groupfilter from='0.0' function='range' level='[none:task:ok]' to='29.0' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0novreq1oylpcx13mklli1p0wbge].[none:task:ok]</column>
            <column>[federated.0novreq1oylpcx13mklli1p0wbge].[attr:task:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
          </pane>
        </panes>
        <rows>([federated.0novreq1oylpcx13mklli1p0wbge].[attr:task:ok] / [federated.0novreq1oylpcx13mklli1p0wbge].[none:feature:nk])</rows>
        <cols>[federated.0novreq1oylpcx13mklli1p0wbge].[usr:Calculation_1632273404430282762:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='interview'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Post-task Questionnaire&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='DirectAnnotation.interview' name='federated.1wjjsp01ho4kj514nj96f0mh4l8r' />
          </datasources>
          <datasource-dependencies datasource='federated.1wjjsp01ho4kj514nj96f0mh4l8r'>
            <column datatype='real' name='[engage (Bingo)]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>Bingo.Value.engage</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='real' name='[engage (DirectAnnotation)]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>DirectAnnotation.Value.engage</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='real' name='[intuitive (Bingo)]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>Bingo.Value.intuitive</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='real' name='[intuitive (DirectAnnotation)]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>DirectAnnotation.Value.intuitive</run>
                </formatted-text>
              </desc>
            </column>
            <column caption='Partner' datatype='real' name='[partner]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>Bingo.Value.partner</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[engage (Bingo)]' derivation='Sum' name='[sum:engage (Bingo):qk]' pivot='key' type='quantitative' />
            <column-instance column='[engage (DirectAnnotation)]' derivation='Sum' name='[sum:engage (DirectAnnotation):qk]' pivot='key' type='quantitative' />
            <column-instance column='[intuitive (Bingo)]' derivation='Sum' name='[sum:intuitive (Bingo):qk]' pivot='key' type='quantitative' />
            <column-instance column='[intuitive (DirectAnnotation)]' derivation='Sum' name='[sum:intuitive (DirectAnnotation):qk]' pivot='key' type='quantitative' />
            <column-instance column='[partner]' derivation='Sum' name='[sum:partner:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[sum:engage (Bingo):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[sum:engage (DirectAnnotation):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[sum:intuitive (Bingo):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[sum:intuitive (DirectAnnotation):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[sum:partner:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[sum:engage (Bingo):qk]&quot;</bucket>
              <bucket>&quot;[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[sum:engage (DirectAnnotation):qk]&quot;</bucket>
              <bucket>&quot;[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[sum:intuitive (Bingo):qk]&quot;</bucket>
              <bucket>&quot;[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[sum:intuitive (DirectAnnotation):qk]&quot;</bucket>
              <bucket>&quot;[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[sum:partner:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[:Measure Names]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='height' field='[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[:Measure Names]' value='189' />
            <format attr='title' class='0' field='[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[Multiple Values]' scope='cols' value='Subject Score' />
            <format attr='subtitle' class='0' field='[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[Multiple Values]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[Multiple Values]' scope='cols' value='true' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[:Measure Names]' value='246' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline2' value='#00000000' />
            <format attr='fill-below' id='refline2' value='#00000000' />
            <format attr='stroke-color' id='refline2' value='#e15759' />
            <format attr='fill-above' id='refline3' value='#00000000' />
            <format attr='fill-below' id='refline3' value='#00000000' />
            <format attr='stroke-color' id='refline3' value='#e15759' />
          </style-rule>
          <style-rule element='refband'>
            <format attr='reverse-palette' id='refline0' value='false' />
            <format attr='reverse-palette' id='refline1' value='false' />
          </style-rule>
          <style-rule element='refboxplot'>
            <format attr='palette' id='refline5' value='bp_gray60' />
            <format attr='boxplot-style' id='refline5' value='modern' />
            <format attr='whisker-end' id='refline5' value='large' />
          </style-rule>
        </style>
        <panes>
          <pane id='12'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <size column='[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[Multiple Values]' />
            </encodings>
            <reference-line axis-column='[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[Multiple Values]' boxplot-mark-exclusion='false' boxplot-whisker-type='standard' enable-instant-analytics='true' formula='average' id='refline5' label-type='automatic' probability='95' scope='per-cell' symmetric='false' value-column='[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[Multiple Values]' z-order='1' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.71364641189575195' />
                <format attr='mark-color' value='#f28e2b' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[:Measure Names]</rows>
        <cols>[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[Multiple Values]</cols>
      </table>
    </worksheet>
    <worksheet name='label'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Labeling comparisons between DirectAnnotation and Bingo</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Bingo.labels' name='federated.1saiza4160ptto1b45ri509qyc8c' />
          </datasources>
          <datasource-dependencies datasource='federated.1saiza4160ptto1b45ri509qyc8c'>
            <column-instance column='[task]' derivation='Count' name='[cnt:task:qk]' pivot='key' type='quantitative' />
            <column datatype='real' name='[label]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>label</run>
                </formatted-text>
              </desc>
            </column>
            <column-instance column='[label]' derivation='None' name='[none:label:ok]' pivot='key' type='ordinal' />
            <column-instance column='[task]' derivation='None' name='[none:task:qk]' pivot='key' type='quantitative' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column datatype='real' name='[task]' role='measure' type='quantitative'>
              <desc>
                <formatted-text>
                  <run>task</run>
                </formatted-text>
              </desc>
            </column>
            <column datatype='string' name='[type]' role='dimension' type='nominal'>
              <desc>
                <formatted-text>
                  <run>type</run>
                </formatted-text>
              </desc>
            </column>
          </datasource-dependencies>
          <sort class='manual' column='[federated.1saiza4160ptto1b45ri509qyc8c].[none:type:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;DirectAnnotation&quot;</bucket>
              <bucket>&quot;Bingo&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </sort>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='width' field='[federated.1saiza4160ptto1b45ri509qyc8c].[none:label:ok]' value='44' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <size column='[federated.1saiza4160ptto1b45ri509qyc8c].[cnt:task:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1saiza4160ptto1b45ri509qyc8c].[none:type:nk] / [federated.1saiza4160ptto1b45ri509qyc8c].[none:label:ok])</rows>
        <cols>[federated.1saiza4160ptto1b45ri509qyc8c].[none:task:qk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <windows source-height='114'>
    <window class='worksheet' name='features'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0novreq1oylpcx13mklli1p0wbge].[none:Calculation_1632273404428677126:qk]</field>
            <field>[federated.0novreq1oylpcx13mklli1p0wbge].[none:feature:nk]</field>
            <field>[federated.0novreq1oylpcx13mklli1p0wbge].[none:task:ok]</field>
            <field>[federated.0novreq1oylpcx13mklli1p0wbge].[none:user:nk]</field>
            <field>[federated.0novreq1oylpcx13mklli1p0wbge].[sum:task:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='interview'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='12' param='[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[Multiple Values]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[:Measure Names]</field>
            <field>[federated.1wjjsp01ho4kj514nj96f0mh4l8r].[none:Document Index (generated):ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='label'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1saiza4160ptto1b45ri509qyc8c].[cnt:task:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1saiza4160ptto1b45ri509qyc8c].[none:label:ok]</field>
            <field>[federated.1saiza4160ptto1b45ri509qyc8c].[none:type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1aabg051c5btfk1ercmmw1ce8064].[none:feature:nk]</field>
            <field>[federated.1aabg051c5btfk1ercmmw1ce8064].[none:task:qk]</field>
            <field>[federated.1aabg051c5btfk1ercmmw1ce8064].[none:type:nk]</field>
            <field>[federated.1aabg051c5btfk1ercmmw1ce8064].[sum:task:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='384' name='Sheet 4' width='384'>
      iVBORw0KGgoAAAANSUhEUgAAAYAAAAGACAYAAACkx7W/AAAACXBIWXMAAAsTAAALEwEAmpwY
      AAAgAElEQVR4nOzdd5gU153v/3dVde6enpxzgCHnKASSUM4JSViSJcuWvfbad+Nzd+/u3d3r
      vfb97b27v7tr7653bVmyohVQRAIBCoAkQASR0wADDMwMk3rydO6qun8MGkACBUTTw9T39Tzo
      edR9uup093R96pxTdY5imqaJEEIIy1FTXQEhhBCpIQEghBAWJQEghBAWJQEghBAWJQEghBAW
      JQEghBAWJQEghBAWJQEghBAWJQEghBAWJQEghBAWJQEghBAWJQEghBAWJQEghBAWJQEghBAW
      JQEghBAWJQEghBAWJQEghBAWJQEghBAWJQEghBAWJQEghBAWJQEghBAWJQEghBAWJQEghBAW
      JQEghBAWJQEghBAWJQEghBAWJQEghBAWJQEghBAWJQEghBAWJQEghBAWJQEghBAWJQEghBAW
      JQEghBAWJQEghBAWJQEgRJL09fURCoVSXQ0hzsmW6goIMVLFYrFUV0GILyQtACGEsCgJACGE
      sCgJACGEsCgJACGEsCgJACGEsCgJACGEsCgJACGEsCgJACGEsCgJACGEsCgJACGEsCgJACGE
      sCgJACGEsCgJACGEsCgJACGEsCgJACGEsCgJACGEsCgJACGEsCgJACGEsCgJACGEsCgJACGE
      sCgJACGEsCgJACGEsCgJACGEsCgJACGEsCjbVy3Y19dHPB5PZl2EGFEGBgaw2WzyuxHD1lcO
      AE3TME0zmXURYkRRVRVN07DZvvLPTIwg0WgURVFwOByprso5feW/TK/Xm8x6CDHixONxHA4H
      fr8/1VURKRAOh1EUBZfLleqqnJOMAQghhEVJ21SIJFq97SjhhJxnWVE8kUCBYd0FOHxrJsQI
      sGZ7Aw0d4VRXQ4izklMTIYSwqAvaAogGu9m7cxubNm3hSHMAQ3FSXDOWm2+8nprSXDTlQu5N
      XEoiA73EFCd+7/AdEBPCai5YC8AId7LstRd48tmlJNLKueXOu7jt+rlEmnbzu2de53hH8ELt
      SlyCPln5DKu2Hkp1NYQQp7lgLQAjHiSspPH9v/w7JlTkDCXLvGmj+Iu/eYL64y1U5tVcqN2J
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='384' name='features' width='384'>
      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
    </thumbnail>
    <thumbnail height='318' name='interview' width='384'>
      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
    </thumbnail>
    <thumbnail height='318' name='label' width='384'>
      iVBORw0KGgoAAAANSUhEUgAAAYAAAAE+CAYAAACEB8e6AAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAfhElEQVR4nO3df3SU9YHv8beXIWEGzEDcxEk3McbbqWZT0x3EKU1zYSndkiu3uQesNnrr
      0h7dxVssF88BdZFd0WUp1fTIci57TLe0ZelSStW43JNu0qtGuBExRnLAjrSODWZhOyMpwSfI
      PEwcTu4fk18zmYQEEibh+3mdE0jmmeeZ73zzzPfzfL/P93lyTU9PTw8iImKc/5TuAoiISHoo
      AEREDKUAEBExlAJARMRQCgAREUMpAEREDKUAEBExlAJARMRQCgAREUMpAEREDKUAEBExlAJA
      RMRQCgAREUMpAEREDKUAEBExlAJARMRQCgAREUMpAEREDKUAEBExlAJARMRQCgAREUMpAERE
      DKUAEBExlAJARMRQCgAREUMpAEREDKUAEBExlAJARMRQCgAREUMpAEREDKUAEBExlAJARMRQ
      CgAREUMpAEREDKUAEBExlAJARMRQCgAREUMpAEREDKUAEBExlAJARMRQCgAREUMpAEREDKUA
      EBExlAJARMRQCgAREUMpAEREDKUAEBExlAJARMRQCgAREUMpAEREDKUAEBExlAJARMRQCgAR
      EUMpAEREDKUAEBExlONyN9DS0jIe5RARkSvsmp6enp50F0JE5GrU0tLCvHnz0l2MYWkISETE
      UAoAERFDKQBERAylABARMZQCQETEUAoAERFDKQBERAylABARMdRlXwl8qUKH63n5vY+YnvS4
      a3YO+YU38embisjKHGEDsQ727fwZ753L5c6VVRSN9NwpKli/jX969TRObPKW/E8eXFyU7iJd
      dToO7+Nnr75H7u1fp2phQbqLI3JFpS0APnrvDZoawyM+p2TRCr5ZVUZWqoXdIZqaA1i0cfZC
      1YSUcbxEQkd5493zlC70kzPqGu/gQH0AywYLCDe8SdfiotR1MeVEOLr/DT7+lI8yb/bEvMIo
      6/wP7zURCFq0XX+GKhQAYpa0BYAjI37IXrhoBffcNofzMeATm99/EODNV5totyHQuJN1h3/H
      xs33kZdc0mlzmFvi5dQcH/muK178MYhQ/+x2Giw3OV8YfQDETrxNsw04PXgIE7YO0Rr6GguH
      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
    </thumbnail>
  </thumbnails>
</workbook>
